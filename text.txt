To implement the API for the Yatube project, follow these steps:

1. Create a new Django application named "api" in your project.

```bash
python manage.py startapp api
```

2. Add the "api" application to the `INSTALLED_APPS` list in your project's settings.py file.

```python
INSTALLED_APPS = [
    ...
    'api',
]
```

3. Define the necessary models and serializers in the "api" application. You can use the existing models from the "posts" application.

4. Create a new file named urls.py in the "api" application directory. Register the API endpoints in this file.

```python
from django.urls import include, path
from rest_framework import routers
from .views import PostViewSet, GroupViewSet, CommentViewSet

router = routers.DefaultRouter()
router.register(r'posts', PostViewSet)
router.register(r'groups', GroupViewSet)
router.register(r'posts/(?P<post_id>\d+)/comments', CommentViewSet)

urlpatterns = [
    path('v1/', include(router.urls)),
    path('v1/api-token-auth/', obtain_auth_token),
]
```

5. Implement the viewsets and serializers in the "api" application's views.py file. Use the ModelViewSet for the Post model and override the perform_update and perform_destroy methods to handle permissions.

```python
from rest_framework import viewsets, permissions
from rest_framework.authtoken.views import obtain_auth_token
from rest_framework.exceptions import PermissionDenied
from posts.models import Post, Group, Comment
from .serializers import PostSerializer, GroupSerializer, CommentSerializer

class PostViewSet(viewsets.ModelViewSet):
    queryset = Post.objects.all()
    serializer_class = PostSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_update(self, serializer):
        if serializer.instance.author != self.request.user:
            raise PermissionDenied('Изменение чужого контента запрещено!')
        super().perform_update(serializer)

    def perform_destroy(self, instance):
        if instance.author != self.request.user:
            raise PermissionDenied('Удаление чужого контента запрещено!')
        super().perform_destroy(instance)

class GroupViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Group.objects.all()
    serializer_class = GroupSerializer

class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all()
    serializer_class = CommentSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def get_queryset(self):
        post_id = self.kwargs.get('post_id')
        return self.queryset.filter(post_id=post_id)

    def perform_update(self, serializer):
        if serializer.instance.author != self.request.user:
            raise PermissionDenied('Изменение чужого контента запрещено!')
        super().perform_update(serializer)

    def perform_destroy(self, instance):
        if instance.author != self.request.user:
            raise PermissionDenied('Удаление чужого контента запрещено!')
        super().perform_destroy(instance)
```

6. Implement the serializers in the "api" application's serializers.py file.

```python
from rest_framework import serializers
from posts.models import Post, Group, Comment

class PostSerializer(serializers.ModelSerializer):
    class Meta:
        model = Post
        fields = '__all__'

class GroupSerializer(serializers.ModelSerializer):
    class Meta:
        model = Group
        fields = '__all__'

class CommentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Comment
        fields = '__all__'
```

7. Update the project's urls.py file to include the "api" application's urls.

```python
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
]
```

Now you have implemented the API for the Yatube project using Django REST Framework. The API is available only to authenticated users and uses TokenAuthentication. The authenticated user can modify and delete their own content, while others can only read. Attempting to modify or delete someone else's content will return a 403 Forbidden response.

The API endpoints are as follows:

- POST: /api/v1/api-token-auth/ - Authenticate with username and password to obtain a token.
- GET, POST: /api/v1/posts/ - Retrieve a list of all posts or create a new post.
- GET, PUT, PATCH, DELETE: /api/v1/posts/{post_id}/ - Retrieve, update, or delete a post with the given post_id.
- GET: /api/v1/groups/ - Retrieve a list of all groups.
- GET: /api/v1/groups/{group_id}/ - Retrieve information about a group with the given group_id.
- GET: /api/v1/posts/{post_id}/comments/ - Retrieve a list of all comments for a post with the given post_id.
- POST: /api/v1/posts/{post_id}/comments/ - Create a new comment for a post with the given post_id.
- GET, PUT, PATCH, DELETE: /api/v1/posts/{post_id}/comments/{comment_id}/ - Retrieve, update, or delete a comment with the given comment_id in a post with the given post_id.

The API returns JSON responses for POST, PUT, and PATCH requests, including the created or updated object.

You can test the API using tools like curl or Postman. Make sure to include the token in the Authorization header with the format "Token <your_token>".